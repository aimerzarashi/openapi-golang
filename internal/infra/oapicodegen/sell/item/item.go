// Package item provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package item

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse struct {
	Message string `json:"message"`
}

// NewSellCategory defines model for NewSellCategory.
type NewSellCategory struct {
	Name string `json:"name" validate:"required,lt=100"`
}

// NewSellItem defines model for NewSellItem.
type NewSellItem struct {
	Name string `json:"name" validate:"required,lt=100"`
}

// NewSellItemPrice defines model for NewSellItemPrice.
type NewSellItemPrice struct {
	Currency *string `json:"currency,omitempty"`
	Duration struct {
		EndAt   time.Time `json:"endAt"`
		StartAt time.Time `json:"startAt"`
	} `json:"duration"`
	Price float32 `json:"price" validate:"required"`
}

// NewSellShop defines model for NewSellShop.
type NewSellShop struct {
	Name string `json:"name" validate:"required,lt=100"`
}

// BadRequest defines model for BadRequest.
type BadRequest = BadRequestResponse

// Created defines model for Created.
type Created struct {
	Id openapi_types.UUID `json:"id" validate:"required"`
}

// PostSellCategoryJSONRequestBody defines body for PostSellCategory for application/json ContentType.
type PostSellCategoryJSONRequestBody = NewSellCategory

// PutSellCategoryJSONRequestBody defines body for PutSellCategory for application/json ContentType.
type PutSellCategoryJSONRequestBody = NewSellCategory

// PostSellItemJSONRequestBody defines body for PostSellItem for application/json ContentType.
type PostSellItemJSONRequestBody = NewSellItem

// PutSellItemJSONRequestBody defines body for PutSellItem for application/json ContentType.
type PutSellItemJSONRequestBody = NewSellItem

// PostSellItemPriceJSONRequestBody defines body for PostSellItemPrice for application/json ContentType.
type PostSellItemPriceJSONRequestBody = NewSellItemPrice

// PutSellItemPriceJSONRequestBody defines body for PutSellItemPrice for application/json ContentType.
type PutSellItemPriceJSONRequestBody = NewSellItemPrice

// PostSellShopJSONRequestBody defines body for PostSellShop for application/json ContentType.
type PostSellShopJSONRequestBody = NewSellShop

// PutSellShopJSONRequestBody defines body for PutSellShop for application/json ContentType.
type PutSellShopJSONRequestBody = NewSellShop

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create Sell Category
	// (POST /sell/categories)
	PostSellCategory(ctx echo.Context) error
	// Delete Sell Category
	// (DELETE /sell/categories/{categoryId})
	DeleteSellCategory(ctx echo.Context, categoryId openapi_types.UUID) error
	// Update Sell Category
	// (PUT /sell/categories/{categoryId})
	PutSellCategory(ctx echo.Context, categoryId openapi_types.UUID) error
	// Create Sell Item
	// (POST /sell/items)
	PostSellItem(ctx echo.Context) error
	// Delete Sell Item
	// (DELETE /sell/items/{itemId})
	DeleteSellItem(ctx echo.Context, itemId openapi_types.UUID) error
	// Update Sell Item
	// (PUT /sell/items/{itemId})
	PutSellItem(ctx echo.Context, itemId openapi_types.UUID) error
	// Create Sell Item Price
	// (POST /sell/items/{itemId}/prices)
	PostSellItemPrice(ctx echo.Context, itemId openapi_types.UUID) error
	// Delete Sell Item Price
	// (DELETE /sell/items/{itemId}/prices/{priceId})
	DeleteSellItemPrice(ctx echo.Context, itemId openapi_types.UUID, priceId openapi_types.UUID) error
	// Update Sell Item Price
	// (PUT /sell/items/{itemId}/prices/{priceId})
	PutSellItemPrice(ctx echo.Context, itemId openapi_types.UUID, priceId openapi_types.UUID) error
	// Create Sell Shop
	// (POST /sell/shops)
	PostSellShop(ctx echo.Context) error
	// Delete Sell Shop
	// (DELETE /sell/shops/{shopId})
	DeleteSellShop(ctx echo.Context, shopId openapi_types.UUID) error
	// Update Sell Shop
	// (PUT /sell/shops/{shopId})
	PutSellShop(ctx echo.Context, shopId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSellCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PostSellCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSellCategory(ctx)
	return err
}

// DeleteSellCategory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSellCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "categoryId" -------------
	var categoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSellCategory(ctx, categoryId)
	return err
}

// PutSellCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PutSellCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "categoryId" -------------
	var categoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, ctx.Param("categoryId"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categoryId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSellCategory(ctx, categoryId)
	return err
}

// PostSellItem converts echo context to params.
func (w *ServerInterfaceWrapper) PostSellItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSellItem(ctx)
	return err
}

// DeleteSellItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSellItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSellItem(ctx, itemId)
	return err
}

// PutSellItem converts echo context to params.
func (w *ServerInterfaceWrapper) PutSellItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSellItem(ctx, itemId)
	return err
}

// PostSellItemPrice converts echo context to params.
func (w *ServerInterfaceWrapper) PostSellItemPrice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSellItemPrice(ctx, itemId)
	return err
}

// DeleteSellItemPrice converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSellItemPrice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "priceId" -------------
	var priceId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "priceId", runtime.ParamLocationPath, ctx.Param("priceId"), &priceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSellItemPrice(ctx, itemId, priceId)
	return err
}

// PutSellItemPrice converts echo context to params.
func (w *ServerInterfaceWrapper) PutSellItemPrice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "priceId" -------------
	var priceId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "priceId", runtime.ParamLocationPath, ctx.Param("priceId"), &priceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSellItemPrice(ctx, itemId, priceId)
	return err
}

// PostSellShop converts echo context to params.
func (w *ServerInterfaceWrapper) PostSellShop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSellShop(ctx)
	return err
}

// DeleteSellShop converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSellShop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "shopId", runtime.ParamLocationPath, ctx.Param("shopId"), &shopId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSellShop(ctx, shopId)
	return err
}

// PutSellShop converts echo context to params.
func (w *ServerInterfaceWrapper) PutSellShop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "shopId", runtime.ParamLocationPath, ctx.Param("shopId"), &shopId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSellShop(ctx, shopId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/sell/categories", wrapper.PostSellCategory)
	router.DELETE(baseURL+"/sell/categories/:categoryId", wrapper.DeleteSellCategory)
	router.PUT(baseURL+"/sell/categories/:categoryId", wrapper.PutSellCategory)
	router.POST(baseURL+"/sell/items", wrapper.PostSellItem)
	router.DELETE(baseURL+"/sell/items/:itemId", wrapper.DeleteSellItem)
	router.PUT(baseURL+"/sell/items/:itemId", wrapper.PutSellItem)
	router.POST(baseURL+"/sell/items/:itemId/prices", wrapper.PostSellItemPrice)
	router.DELETE(baseURL+"/sell/items/:itemId/prices/:priceId", wrapper.DeleteSellItemPrice)
	router.PUT(baseURL+"/sell/items/:itemId/prices/:priceId", wrapper.PutSellItemPrice)
	router.POST(baseURL+"/sell/shops", wrapper.PostSellShop)
	router.DELETE(baseURL+"/sell/shops/:shopId", wrapper.DeleteSellShop)
	router.PUT(baseURL+"/sell/shops/:shopId", wrapper.PutSellShop)

}
